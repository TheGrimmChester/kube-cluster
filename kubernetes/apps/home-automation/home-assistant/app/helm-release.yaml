---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: home-assistant
  namespace: home-automation
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

      interval: 5m
  install:
    createNamespace: true
  upgrade:
    remediation: # perform remediation when helm upgrade fails
      retries: 50
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
#  dependsOn:
#    - name: cluster-apps-mosquitto
#      namespace: home-automation
  values:
    image:
      repository: ghcr.io/home-assistant/home-assistant
      tag: 2024.1.2
#    initContainers:
#      init-db:
#        image: ghcr.io/onedr0p/postgres-initdb:14.8
#        imagePullPolicy: IfNotPresent
#        envFrom:
#          - secretRef:
#              name: home-assistant-secret
    controller:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"

    env:
      TZ: "Europe/Paris"
    envFrom:
      - secretRef:
          name: home-assistant-secret

#    envFrom:
#      - secretRef:
#          name: home-assistant
#    hostNetwork: true
#    dnsPolicy: ClusterFirstWithHostNet

    service:
      main:
        ports:
          http:
            port: 8123

    ingress:
      main:
        enabled: true
        ingressClassName: "external"
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
#          external-dns/is-public: "true"
#          nginx.ingress.kubernetes.io/whitelist-source-range: |
#            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hajimari.io/enable: "true"
#          hajimari.io/group: "home"
          hajimari.io/icon: "home-assistant"
        hosts:
          - host: &host "hass.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
    probes:
      liveness:
        enabled: false
      readiness:
        enabled: false
      startup:
        enabled: false

    podSecurityContext:
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 568
      fsGroupChangePolicy: "OnRootMismatch"
      supplementalGroups:
        - 100

#    persistence:
#      ha-config:
#        enabled: true
#        type: configMap
#        name: ha-config
#        mountPath: /config/configuration.yaml
#        subPath: configuration.yaml
#    persistence:
#      config:
#        enabled: true
#        storageClass: ceph-block
#        accessMode: ReadWriteOnce
#        size: "5Gi"
    volumeClaimTemplates:
      - name: config
        mountPath: /config
        accessMode: ReadWriteOnce
        size: 5Gi
        storageClass: ceph-block

    persistence:
      hass-dbus:
        enabled: true
        type: hostPath
        hostPath: /run/dbus
        mountPath: /run/dbus
        readonly: true
      hass-ssh:
        enabled: true
        type: hostPath
        hostPath: /home/hawol/.ssh
        mountPath: /root/.ssh
#      config:
#        enabled: true
#        type: emptyDir
#        existingClaim: home-assistant-config-v1
    podAnnotations:
      secret.reloader.stakater.com/reload: "home-assistant"
    resources:
      requests:
        cpu: 10m
        memory: 100Mi
      limits:
        memory: 750Mi
    addons:
      codeserver:
        enabled: true
        image:
          repository: ghcr.io/coder/code-server
          tag: 4.20.0
        env:
          TZ: '${TIMEZONE}'
        workingDir: '/config'
        args:
          - --auth
          - 'none'
          - --user-data-dir
          - '/config/.vscode'
          - --extensions-dir
          - '/config/.vscode'
        ingress:
          enabled: true
          ingressClassName: 'external'
          annotations:
            hajimari.io/appName: 'Hass Config'
            hajimari.io/icon: cib:visual-studio-code
            external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
            nginx.ingress.kubernetes.io/auth-method: GET
            nginx.ingress.kubernetes.io/auth-url: http://authelia.security.svc.cluster.local/api/verify
            nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}?rm=$request_method"
            nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
            nginx.ingress.kubernetes.io/auth-snippet: |
              proxy_set_header X-Forwarded-Method $request_method;

#            nginx.ingress.kubernetes.io/whitelist-source-range: |
#              10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hosts:
            - host: &host 'hass-code.${SECRET_DOMAIN}'
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - hosts:
                - *host
        volumeMounts:
          - name: config
            mountPath: /config
    nodeSelector:
      kubernetes.io/hostname: "truenas2012"
