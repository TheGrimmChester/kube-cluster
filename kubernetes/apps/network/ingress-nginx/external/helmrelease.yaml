---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ingress-nginx-external
spec:
  interval: 30m
  chart:
    spec:
      chart: ingress-nginx
      version: 4.11.2
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  dependsOn:
    - name: cloudflared
      namespace: network
  values:
    allowSnippetAnnotations: true # Required but risky - see https://github.com/kubernetes/ingress-nginx/issues/7837 - ok as only one user in the cluster
    watchIngressWithoutClass: true
    fullnameOverride: ingress-nginx-external
    controller:
      replicaCount: 3
      service:
        annotations:
          external-dns.alpha.kubernetes.io/hostname: "external.${SECRET_DOMAIN},external.${PERSONAL_SECRET_DOMAIN}"
          io.cilium/lb-ipam-ips: "192.168.1.202"
        externalTrafficPolicy: Cluster
      ingressClassResource:
        name: external
        default: false
        controllerValue: k8s.io/external
      admissionWebhooks:
        objectSelector:
          matchExpressions:
            - key: ingress-class
              operator: In
              values: ["external"]
      config:
        block-user-agents: "GPTBot,~*GPTBot*,ChatGPT-User,~*ChatGPT-User*,Google-Extended,~*Google-Extended*,CCBot,~*CCBot*,Omgilibot,~*Omgilibot*,FacebookBot,~*FacebookBot*" # taken from https://github.com/superseriousbusiness/gotosocial/blob/main/internal/web/robots.go
        client-max-body-size: 10G
        client-body-buffer-size: 100M
        client-body-timeout: 300
        client-header-timeout: 300
        enable-brotli: "true"
        enable-real-ip: "true"
        hsts-max-age: 31449600
        keep-alive-requests: 10000
        keep-alive: 300
        log-format-escape-json: "true"
        log-format-upstream: >
          {"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for",
          "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time,
          "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args",
          "request_length": $request_length, "duration": $request_time, "method": "$request_method", "http_referrer": "$http_referer",
          "http_user_agent": "$http_user_agent"}
        proxy-body-size: 10G
        proxy-buffer-size: 16k
        ssl-protocols: TLSv1.3 TLSv1.2
#        # See instructions at https://goauthentik.io/docs/providers/proxy/forward_auth
#        global-auth-url: "http://ak-outpost-external.security.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx"
#        global-auth-signin: "https://sso.${SECRET_DOMAIN}/outpost.goauthentik.io/start?rd=$scheme://$host$request_uri"
#        #global-auth-signin: "https://sso.${SECRET_DOMAIN}/outpost.goauthentik.io/start?rd=$escaped_request_uri"
#        #global-auth-response-headers: X-Auth-Username,X-Forwarded-Email,X-Forwarded-Preferred-Username,X-Forwarded-User,X-Auth-Groups
#        global-auth-response-headers: Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
#        global-auth-snippet: |
#          proxy_set_header X-Forwarded-Host $http_host;
#        location-snippet: |
#          auth_request_set $authentik_username $upstream_http_X_authentik_username;
#          auth_request_set $authentik_groups $upstream_http_X_authentik_groups;
#        server-snippet: |
#          access_by_lua_block {
#            local username = ngx.var.authentik_username
#            local groups    = ngx.var.authentik_groups
#            local required_usernames = ngx.var['required_usernames']
#            local required_groups    = ngx.var['required_groups']
#              local sep = '|'
#            if (required_usernames ~= nil) then
#              for required_username in string.gmatch(required_usernames, "([^"..sep.."]+)") do
#                if string.match(username, required_username) then
#                  return;
#                end
#              end
#            end
#            if (required_groups ~= nil) then
#              for group in string.gmatch(groups, "([^"..sep.."]+)") do
#                for required_group in string.gmatch(required_groups, "([^"..sep.."]+)") do
#                  if string.match(group, required_group) then
#                    return;
#                  end
#                end
#              end
#            end
#            if (required_usernames ~= nil) or (required_groups ~= nil)  then
#              ngx.exit(ngx.HTTP_FORBIDDEN);
#            end
#          }
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespaceSelector:
            any: true
      extraArgs:
        default-ssl-certificate: "network/${SECRET_DOMAIN/./-}-production-tls"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/instance: ingress-nginx-external
              app.kubernetes.io/component: controller
      resources:
        requests:
          cpu: 100m
        limits:
          memory: 500Mi
    defaultBackend:
      enabled: false
